Binary search


The binary search algorithm is based on the divide-and-conquer design technique.
This algorithm is used to find a given element from a sorted list of elements.
It first compares the search element with the middle element of the list; 
if the search element is smaller than the middle element, then the half of the list of elements greater than the middle element is discarded; 
the process repeats recursively until the search element is found or we reach the end of the list.
It is important to note that in each iteration, half of the search space is discarded,
which improves the performance of the overall algorithm because there are fewer elements to search through.

When analyzing the workings of the binary search algorithm in the worst case,
we can see that for a given array of 8 elements, following the first unsuccessful attempt,
the list is halved, and then again for an unsuccessful search attempt, the list is of length 2,
and finally, only 1 element is left. So, the binary search requires 4 searches. If the size of the list is doubled,
in other words, to 16, following the first unsuccessful search, we will have a list of size 8,
and that will take a total of 4 searches. Therefore, the binary search algorithm will require 5 searches for a list of 16 items.
Thus, we can observe that when we double the number of items in the list,
the number of searches required also increments by 1.
We can say this as when we have a list of length n, the total number of searches required will be the number of times we repeated halving the list until we are left with 1 element plus 1
which is mathematically equivalent to (log2 n + 1). For example, if n=8, the output will be 3,
meaning the number of searches required will be 4.
The list is divided in half in each iteration; with the divide-and-conquer strategy,
the worst-case time complexity of the binary search algorithm is O(log n).